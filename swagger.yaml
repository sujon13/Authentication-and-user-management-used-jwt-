openapi: 3.0.0
info:
    title: User Management API
    description: Authentication and UserManagement
    version: 1.0.0
servers:
    - url: http://127.0.0.1:3000/api/v1

# Descriptions of common components
components:
    securitySchemes:
        bearerAuth: # arbitrary name for the security scheme
            type: http
            scheme: bearer
            bearerFormat: JWT

    responses:
        BadRequest:
            description: Bad Request. Path parameters, Query parameters or request body is malformed.
            content:
                text/html:
                    schema:
                        $ref: "#/components/schemas/Error"
        Unauthorized:
            description: Unauthorized. Access token is expired or invalid.
            content:
                text/html:
                    schema:
                        $ref: "#/components/schemas/Error"
        Forbidden:
            description: Forbidden! You have not enough permission.
            content:
                text/html:
                    schema:
                        $ref: "#/components/schemas/Error"
        NotFound:
            description: The specified resource was not found
            content:
                text/html:
                    schema:
                        $ref: "#/components/schemas/Error"
        Conflict:
            description: Email or phone already exist. Please try with another email or phone number.
            content:
                text/html:
                    schema:
                        $ref: "#/components/schemas/Error"
        ServerError:
            description: Internal Server Error.
            content:
                text/html:
                    schema:
                        $ref: "#/components/schemas/Error"

    schemas:
        Error:
            type: string
        Id:
            in: path
            name: id
            type: string
            minLength: 24
            maxLength: 24
            example: 11049751d867bf37548556b3
        User:
            properties:
                id:
                    type: integer
                name:
                    type: string
                    minLength: 3
                    maxLength: 100
                email:
                    type: string
                    format: email
                    minLength: 6
                    maxLength: 100
                    unique: true
                phoneNumber:
                    type: integer
                    format: int64
                    unique: true
                password:
                    type: string
                    minLength: 6
                    format: password
                isAdmin:
                    type: boolean
            required:
                - id
                - name
                - email
                - phoneNumber
                - password

        Signup:
            properties:
                name:
                    type: string
                    minLength: 3
                    maxLength: 100
                    description: write your name here
                email:
                    type: string
                    format: email
                    minLength: 6
                    maxLength: 100
                    unique: true
                phoneNumber:
                    type: integer
                    format: int64
                    unique: true
                password:
                    type: string
                    minLength: 6
                    format: password
            required:
                - name
                - email
                - phoneNumber
                - password
paths:
    /users:
        get:
            security:
                - bearerAuth: []
            summary: Returns  list of registered users.
            description: Only admin can see users list. You need to provide bearer token in Authorization header.

            parameters:
                - name: page
                  description: Page you want to get
                  in: query
                  required: true
                  schema:
                      type: integer
                      minimum: 1
                      format: int64
                  example: 1
                - name: limit
                  description: Number of items you want in a page
                  in: query
                  required: true
                  schema:
                      type: integer
                      minimum: 1
                      format: int64
                  example: 5
            responses:
                "200": # status code
                    description: A JSON array of users
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "5xx":
                    $ref: "#/components/responses/ServerError"

        post:
            summary: Register/Signup for users.
            description: You need to provide your credentials to signup. This api assumes you have already verified your email and phone number.
            requestBody:
                description: Give your credentials. All fields are required.
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            $ref: "#/components/schemas/Signup"
                        example:
                            name: Mr X
                            email: abc@gmail.com
                            phoneNumber: 017........
                            password: 1......8

            responses:
                "201": # status code
                    description: Created.
                    content:
                        application/json:
                            schema:
                                type: object
                                $ref: "#/components/schemas/User"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "409":
                    $ref: "#/components/responses/Conflict"
                "5xx":
                    $ref: "#/components/responses/ServerError"

    /users/signin:
        post:
            summary: Signin/Login endpoint.
            description: You need to provide your credentials to signin.
            requestBody:
                description: Give your credentials. All fields are required.
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                password:
                                    type: string
                                    format: password
            responses:
                "200": # status code
                    description: Created.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    profile:
                                        $ref: "#/components/schemas/User"
                                    accessToken:
                                        type: string
                                    refreshToken:
                                        type: string
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "5xx":
                    $ref: "#/components/responses/ServerError"

    /users/me:
        get:
            security:
                - bearerAuth: []
            summary: Returns user's own profile.
            description: You need to provide bearer token in Authorization header.

            responses:
                "200": # status code
                    description: OK.
                    content:
                        application/json:
                            schema:
                                type: object
                                $ref: "#/components/schemas/User"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "404":
                    $ref: "#/components/responses/NotFound"
                "5xx":
                    $ref: "#/components/responses/ServerError"

    /users/{id}:
        get:
            security:
                - bearerAuth: []
            summary: Returns a user's profile.
            description: Only admin has access to this. Admin needs to provide bearer token in Authorization header.
            parameters:
                - $ref: "#/components/schemas/Id"

            responses:
                "200": # status code
                    description: OK.
                    content:
                        application/json:
                            schema:
                                type: object
                                $ref: "#/components/schemas/User"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    $ref: "#/components/responses/NotFound"
                "5xx":
                    $ref: "#/components/responses/ServerError"

        put:
            security:
                - bearerAuth: []
            summary: Updates profile.
            description: A user can update his own account. Admin has also this permission.
            parameters:
                - $ref: "#/components/schemas/Id"

            requestBody:
                description: Enter fields you want to update.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    minLength: 3
                                    maxLength: 100
                                    description: write your name here
                                email:
                                    type: string
                                    format: email
                                    minLength: 6
                                    maxLength: 100
                                    unique: true
                                phoneNumber:
                                    type: integer
                                    format: int64
                                    unique: true
                                isAdmin:
                                    type: boolean
                                    description: Only admin has permission to set it

            responses:
                "200": # status code
                    description: OK.
                    content:
                        application/json:
                            schema:
                                type: object
                                $ref: "#/components/schemas/User"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    $ref: "#/components/responses/NotFound"
                "5xx":
                    $ref: "#/components/responses/ServerError"

        delete:
            security:
                - bearerAuth: []
            summary: Deletes user profile.
            description: A user can delete his own account. Admin has also this permission.
            parameters:
                - $ref: "#/components/schemas/Id"

            responses:
                "204": # status code
                    description: No Content.
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    $ref: "#/components/responses/NotFound"
                "5xx":
                    $ref: "#/components/responses/ServerError"

    /auth/account/find:
        get:
            summary: Finds user account.
            description: User can find his account by email or password.
            parameters:
                - in: query
                  name: email
                  type: string
                  format: email
                  minLength: 6
                  maxLength: 100
                  unique: true
                - in: query
                  name: phoneNumber
                  type: integer
                  format: int64
                  unique: true

            responses:
                "200": # status code
                    description: OK.
                    content:
                        text/html:
                            schema:
                                type: string
                "400":
                    $ref: "#/components/responses/BadRequest"
                "404":
                    $ref: "#/components/responses/NotFound"
                "5xx":
                    $ref: "#/components/responses/ServerError"

    /auth/password/reset:
        post:
            summary: Resets Password.
            description: A user can reset his account password. Assumed email is already verified.

            requestBody:
                description: Enter your email and new password.
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                    minLength: 6
                                    maxLength: 100
                                    unique: true
                                password:
                                    type: string
                                    minLength: 6
                                    format: password

            responses:
                "200": # status code
                    description: OK.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    email:
                                        type: string
                                        format: email
                "400":
                    $ref: "#/components/responses/BadRequest"
                "5xx":
                    $ref: "#/components/responses/ServerError"

    /auth/token/refresh:
        get:
            security:
                - bearerAuth: []
            summary: Gets refresh token.
            description: A user can refresh his token. He must provide his refresh token in Authorization header.
            responses:
                "200":
                    description: OK.
                    content:
                        text/html:
                            schema:
                                type: string
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "5xx":
                    $ref: "#/components/responses/ServerError"

    /auth/otps/request:
        post:
            summary: Creates otp.
            description: Create and send otp to given email. Assumed email is already verified.
            requestBody:
                description: Enter your email.
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                    minLength: 6
                                    maxLength: 100
                                    unique: true
            responses:
                "200": # status code
                    description: OK.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    statusCode:
                                        type: integer
                                    id:
                                        type: string
                "5xx":
                    $ref: "#/components/responses/ServerError"

    /auth/otps/verify:
        post:
            summary: Verifies otp.
            description: Verify otp from sent id and token.
            requestBody:
                description: Enter otp creation id and otp which was sent to youe mail.
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                id:
                                    type: string
                                    minLength: 24
                                    maxLength: 24
                                otp:
                                    type: integer

            responses:
                "200": # status code
                    description: OK.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    statusCode:
                                        type: integer
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "5xx":
                    $ref: "#/components/responses/ServerError"
